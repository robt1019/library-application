{
  "name": "gulp-jscs",
  "version": "3.0.2",
  "description": "Check JavaScript code style with jscs",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/jscs-dev/gulp-jscs"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "xo && mocha"
  },
  "files": [
    "index.js",
    "reporters"
  ],
  "keywords": [
    "gulpplugin",
    "jscs",
    "javascript",
    "ecmascript",
    "js",
    "code",
    "style",
    "validate",
    "lint",
    "ast",
    "check",
    "checker"
  ],
  "dependencies": {
    "gulp-util": "^3.0.4",
    "jscs": "^2.1.1",
    "through2": "^2.0.0",
    "tildify": "^1.0.0"
  },
  "devDependencies": {
    "mocha": "*",
    "stream-assert": "^2.0.2",
    "temp-write": "^1.1.2",
    "xo": "*"
  },
  "readme": "# gulp-jscs [![Build Status](https://travis-ci.org/jscs-dev/gulp-jscs.svg?branch=master)](https://travis-ci.org/jscs-dev/gulp-jscs)\n\n> Check JavaScript code style with [JSCS](http://jscs.info)\n\n![](screenshot.png)\n\n*Issues with the output should be reported on the JSCS [issue tracker](https://github.com/jscs-dev/node-jscs/issues).*\n\n\n## Install\n\n```\n$ npm install --save-dev gulp-jscs\n```\n\n\n## Usage\n\n### Reporting\n\n```js\nconst gulp = require('gulp');\nconst jscs = require('gulp-jscs');\n\ngulp.task('default', () => {\n\treturn gulp.src('src/app.js')\n\t\t.pipe(jscs())\n\t\t.pipe(jscs.reporter());\n});\n```\n\n### Fixing\n\n```js\nconst gulp = require('gulp');\nconst jscs = require('gulp-jscs');\n\ngulp.task('default', () => {\n\treturn gulp.src('src/app.js')\n\t\t.pipe(jscs({fix: true}))\n\t\t.pipe(gulp.dest('src'));\n});\n```\n\n### Reporting & fixing & failing on lint error\n\n```js\nconst gulp = require('gulp');\nconst jscs = require('gulp-jscs');\n\ngulp.task('default', () => {\n\treturn gulp.src('src/app.js')\n\t\t.pipe(jscs({fix: true}))\n\t\t.pipe(jscs.reporter())\n\t\t.pipe(jscs.reporter('fail'))\n\t\t.pipe(gulp.dest('src'));\n});\n```\n\n\n## Results\n\nA `jscs` object will be attached to the file object.  \nAn example with one error might look like this:\n\n```js\n{\n\tsuccess: false,  // or true if no errors\n\terrorCount: 1,   // number of errors in the errors array\n\terrors: [{       // an array of jscs error objects\n\t\tfilename: 'index.js',  // basename of the file\n\t\trule: 'requireCamelCaseOrUpperCaseIdentifiers',  // the rule which triggered the error\n\t\tmessage: 'All identifiers must be camelCase or UPPER_CASE',  // error message\n\t\tline: 32,  // error line number\n\t\tcolumn: 7  // error column\n\t}]\n};\n```\n\n\n## API\n\nJSCS [config](http://jscs.info/overview.html#options) should be placed in a `.jscsrc` file.\n\n### jscs([options])\n\n#### options\n\n##### fix\n\nType: `boolean`  \nDefault: `false`\n\nMake JSCS attempt to auto-fix your files.  \nBe sure to pipe to `gulp.dest` if you use this option.\n\n##### configPath\n\nType: `string`  \nDefault: JSCS will search for the config file up to your home directory.\n\nSet the path to the JSCS config file.  \nOnly use this option when it can't be found automatically.\n\n### jscs.reporter([reporter])\n\n#### reporter\n\nType: `string`  \nDefault: `console`\n\nSee the JSCS [reporter docs](http://jscs.info/overview#-reporter-r) for supported input.\n\nCan be used multiple times in the same pipeline.\n\nThis plugin also ships with some custom reporters:\n\n- `fail` - Emits an error at the end of the stream if there are lint errors.\n- `failImmediately` - Emits an error immediately if there are lint errors.\n\n\n## License\n\nMIT Â© [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/jscs-dev/gulp-jscs/issues"
  },
  "_id": "gulp-jscs@3.0.2",
  "_from": "gulp-jscs@"
}
